# -*- coding: utf-8 -*-
"""Cats_vs_dogs.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eJa-jyXZksFKLDiGZajng2DseEHwBzBX
"""

import tensorflow as tf
import numpy as np
import pandas as pd

from tensorflow import keras
from tensorflow.keras import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.python.keras import callbacks

import  tensorflow_datasets as tfds
import tensorflow_hub as hub
import matplotlib.pyplot as plt

module_selection = ("mobilenet_v2", 224, 1280) 
handle_base, pixels, FV_SIZE = module_selection
MODULE_HANDLE ="https://tfhub.dev/google/tf2-preview/{}/feature_vector/4".format(handle_base)
IMAGE_SIZE = (pixels, pixels)

def load_data():


  tfds.disable_progress_bar()
  (train_examples, val_examples, test_examples), info = tfds.load(
      'cats_vs_dogs',
      split=['train[80%:]', 'train[80%:90%]', 'train[90%:]'],
      with_info=True, 
      as_supervised=True, 
  )

  num_examples = info.splits['train'].num_examples
  num_classes = info.features['label'].num_classes

  def format_image(image, label):
      image = tf.image.resize(image, IMAGE_SIZE) / 255.0 
      return image, label

  BATCH_SIZE = 128

  train_batches = train_examples.shuffle(num_examples // 4).map(format_image).batch(BATCH_SIZE).prefetch(1)
  validation_batches = val_examples.map(format_image).batch(BATCH_SIZE).prefetch(1)
  test_batches = test_examples.map(format_image).batch(1)
  return (train_examples, val_examples, test_examples), (train_batches, validation_batches, test_batches), num_classes

def run_model(train_batches, validation_batches, num_classes):
  feature_extractor = hub.KerasLayer(
    MODULE_HANDLE, 
    trainable= False,
    input_shape = IMAGE_SIZE + (3,),
    output_shape= [FV_SIZE]
  )

  model = Sequential([
      feature_extractor,
      Dense(num_classes, activation='softmax')
  ])

  optimizer = keras.optimizers.Adam(0.02)
  loss = keras.losses.SparseCategoricalCrossentropy(from_logits=True)
  model.compile(optimizer=optimizer, loss=loss, metrics=['accuracy'])
  epochs = 50
  callback = callbacks.EarlyStopping(monitor = 'val_loss', patience=3, restore_best_weights=True)
  history = model.fit(train_batches, 
              epochs = epochs, 
              validation_data = validation_batches, 
              callbacks = callback, 
              verbose=True)
  model.save('cat_vs_dog_model')
  return model

def plot_predictions(test_examples, classes):
  fig1 = plt.figure(figsize=(10, 10))
  fig1.suptitle("Predictions", fontsize = 30)
  i = 0
  for example in test_examples.enumerate():
    plt.subplot(3, 3, i + 1)
    plt.imshow(example[1][0])
    plt.title(f"Predicted {classes[np.round(np.argmax(predictions[i]))]}, actually {classes[example[1][1].numpy()]}")
    if i >= 8:
      break
    i += 1

def plot_pretty_confusion_matrix(y_true, y_pred, classes = None):
  from sklearn.metrics import confusion_matrix
  conf = confusion_matrix(y_true, y_pred)
  conf_norm = conf.astype('float') / conf.sum(axis = 1)[:, np.newaxis]

  if not classes:
    classes = np.arange(conf.shape[0])
  
  fig, axes = plt.subplots(figsize=(10, 10))
  cax = axes.matshow(conf, cmap=plt.cm.Blues)
  axes.set(title = "Confusion Matrix",
           xlabel = "Predicted Label", 
           ylabel = "True Label",
           xticks = np.arange(conf.shape[0]),
           yticks = np.arange(conf.shape[0]),
           xticklabels = classes,
           yticklabels = classes)
  axes.xaxis.set_label_position('bottom')
  axes.xaxis.tick_bottom()

  axes.yaxis.label.set_size(20)
  axes.xaxis.label.set_size(20)
  axes.title.set_size(20)

  threshold = (conf.max() - conf.min()) / 2

  import itertools

  for i, j in itertools.product(range(conf.shape[0]), range(conf.shape[1])):
    plt.text(j, i, f"{conf[i, j]} ({conf_norm[i, j]*100:.1f}%)",
            horizontalalignment="center",
            color="white" if conf[i, j] > threshold else "black",
            size=15)

if __name__ == '__main__':
  examples, batches, num_classes = load_data()
  train_examples, val_examples, test_examples = examples
  train_batches, validation_batches, test_batches = batches
  inp = input("Run/Load? ")
  if inp.lower() == "run":
    model = run_model(train_batches, validation_batches, num_classes)
  elif inp.lower() == "load":
    try:
      model = tf.keras.models.load_model('cat_vs_dog_model')
    except OSError as e:
      print(e)
  try:
    model
    inp = (input("Wish to evaluate the model (yes/no)? "))
    if inp.lower == "yes":
      test_loss, test_acc = model.evaluate(test_batches, verbose = 2)
    
    classes = ["Cat", "Dog"]
    predictions = model.predict(test_batches)
    plot_predictions(test_examples, classes)

    pred = [np.argmax(predictions[i]) for i in range(len(predictions))]
    y_true = []
    
    for examples in test_examples.enumerate():
      y_true.append(examples[1][1].numpy())

    plot_pretty_confusion_matrix(y_true, pred, classes)
  except:
    pass